{"version":3,"sources":["src/goit-js-hw-11-promisification/promise.js"],"names":["delay","ms","promise","Promise","resolve","reject","setTimeout","console","log","then","result","logger","time","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","logger2","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay1","id","logSuccess","args","logError","warn","amount","catch"],"mappings":"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","file":"promise.5674f92d.js","sourceRoot":"..","sourcesContent":["\r\n//       Задание 1 --------------\r\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. \r\n// Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\r\n//console.log(\"test it's promise script file\"); \r\n\r\n\r\nconst delay = ms => {\r\n    \r\n    let promise = new Promise(function(resolve, reject) {\r\n      setTimeout(() => resolve(ms), ms);\r\n    });\r\n\r\n    console.log(promise);\r\n    \r\n    promise.then(\r\n      result => console.log(`result - ${result}`), \r\n      reject => console.log(`reject - ${reject}`) \r\n       );\r\n    return promise;\r\n  };\r\n  \r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n  \r\n  // Вызовы функции для проверки\r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms\r\n\r\n\r\n  //    Задание 2  -----------------------\r\n  // Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, \r\n  // а принимала всего два параметра allUsers и userName и возвращала промис.\r\n  \r\n  const users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n  ];\r\n  \r\n  const toggleUserState = (allUsers, userName) => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n  \r\n  //  callback(updatedUsers);\r\n\r\n   return new Promise(function(resolve, reject) {\r\n      resolve(updatedUsers);\r\n    });\r\n\r\n  };\r\n  \r\n  const logger2 = updatedUsers => console.table(updatedUsers);\r\n  \r\n  /*\r\n   * Должно работать так\r\n   */\r\n  toggleUserState(users, 'Mango').then(logger2);\r\n  toggleUserState(users, 'Lux').then(logger2);\r\n\r\n\r\n\r\n//    Задание 3    ---------------------\r\n//  Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, а принимала всего один параметр \r\n// transaction и возвращала промис.\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {  \r\n  return new Promise(function(resolve, reject) {\r\n    const delay1 = randomIntegerFromInterval(200, 500);\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n      if (canProcess) {\r\n        resolve({delay1, transaction});\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay1);\r\n  });\r\n};\r\n\r\nconst logSuccess = (args) => {\r\n  const { delay1, transaction, ...other } = args;\r\n  console.log(`Transaction ${transaction.id} processed in ${delay1}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"]}