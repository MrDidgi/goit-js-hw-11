{"version":3,"sources":["src/goit-js-hw-11-promisification/promise.js"],"names":["console","log","alert","delay","ms","promise","Promise","resolve","reject","setTimeout","then","result","error","logger","time"],"mappings":";AAGAA,QAAQC,IAAI,iCACZC,MAAM,SAEN,IAAMC,EAAQ,SAAAC,GAEV,IAAIC,EAAU,IAAIC,QAAQ,SAASC,EAASC,GAC1CC,WAAW,WAAA,OAAMF,EAAQ,UAAUH,KASrC,OANAJ,QAAQC,IAAII,GAEZA,EAAQK,KACN,SAAAC,GAAM,OAAIT,MAAMS,IAChB,SAAAC,GAAK,OAAIV,MAAMU,KAEVP,GAGHQ,EAAS,SAAAC,GAAI,OAAId,QAAQC,IAAsBa,kBAAAA,OAAAA,EAAlC,QAGnBX,EAAM,KAAMO,KAAKG,GACjBV,EAAM,KAAMO,KAAKG,GACjBV,EAAM,MAAMO,KAAKG","file":"promise.0246ca41.js","sourceRoot":"..","sourcesContent":["// Задание 1\r\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. \r\n// Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\r\nconsole.log(\"test it's promise script file\"); \r\nalert(\"ALERT\");\r\n\r\nconst delay = ms => {\r\n    \r\n    let promise = new Promise(function(resolve, reject) {\r\n      setTimeout(() => resolve(\"done!\"), ms);\r\n    });\r\n\r\n    console.log(promise);\r\n    \r\n    promise.then(\r\n      result => alert(result), // выведет \"done!\" через одну секунду\r\n      error => alert(error) // не будет запущена\r\n    );\r\n    return promise;\r\n  };\r\n  \r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n  \r\n  // Вызовы функции для проверки\r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms\r\n\r\n"]}