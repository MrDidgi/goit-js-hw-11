{"version":3,"sources":["src/goit-js-hw-11-promisification/promise.js"],"names":["console","log","delay","ms","promise","Promise","resolve","reject","setTimeout","then","result","logger","time"],"mappings":"AAAA;AACA;AACA;AACAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;;AAGA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,EAAE,EAAI;EAEhB,IAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;IAClDC,UAAU,CAAC;MAAA,OAAMF,OAAO,CAACH,EAAD,CAAb;IAAA,CAAD,EAAoBA,EAApB,CAAV;EACD,CAFa,CAAd;EAIAH,OAAO,CAACC,GAAR,oBAAwBG,OAAxB,kBAAuCD,EAAvC;EAEAC,OAAO,CAACK,IAAR,CACE,UAAAC,MAAM;IAAA,OAAIV,OAAO,CAACC,GAAR,CAAYS,MAAZ,CAAJ;EAAA,CADR,EAEE,UAAAH,MAAM;IAAA,OAAIP,OAAO,CAACC,GAAR,CAAYM,MAAZ,CAAJ;EAAA,CAFR;EAIA,OAAOH,OAAP;AACD,CAbH;;AAeE,IAAMO,MAAM,GAAG,SAATA,MAAS,CAAAC,IAAI;EAAA,OAAIZ,OAAO,CAACC,GAAR,0BAA8BW,IAA9B,QAAJ;AAAA,CAAnB,EAEA;;;AACAV,KAAK,CAAC,IAAD,CAAL,CAAYO,IAAZ,CAAiBE,MAAjB,GAA0B;;AAC1BT,KAAK,CAAC,IAAD,CAAL,CAAYO,IAAZ,CAAiBE,MAAjB,GAA0B;;AAC1BT,KAAK,CAAC,IAAD,CAAL,CAAYO,IAAZ,CAAiBE,MAAjB,GAA0B","file":"promise.d62f3c85.js","sourceRoot":"..","sourcesContent":["// Задание 1\r\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. \r\n// Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\r\nconsole.log(\"test it's promise script file\"); \r\n\r\n\r\nconst delay = ms => {\r\n    \r\n    let promise = new Promise(function(resolve, reject) {\r\n      setTimeout(() => resolve(ms), ms);\r\n    });\r\n\r\n    console.log(`promise: ${promise} ms: ${ms}`);\r\n    \r\n    promise.then(\r\n      result => console.log(result), \r\n      reject => console.log(reject) \r\n       );\r\n    return promise;\r\n  };\r\n  \r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n  \r\n  // Вызовы функции для проверки\r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms\r\n\r\n"]}